//1. Дан код:
//
//var a = 1, b = 1, c, d;
//c = ++a; alert(c);           // 2                         Сначала увеличивается значение a на 1,потом вывод С. Значение a увеличено на 1.
//d = b++; alert(d);           // 1                         Значение b из-за постфиксной формы = 1, поэтому d=1. Значение b при этом увеличивается на 1.
//c = (2+ ++a); alert(c);      // 5                         Значение а увеличилось на 1,т.е равно 2,поэтому a увеличивается еще на 1(т.е равно 3). Итого: 2+3=5
//d = (2+ b++); alert(d);      // 4                         Из-за постфиксной формы записи b всё еще равен 1(старое значение). Увеличиваем на 1,b=2. Итого: 2+2=4
//alert(a);                    // 3                         Значение a увеличивалось дважды на 1. Итого: 3
//alert(b);                    // 3                         Значение b увеличивалось дважды на 1. Итого: 3

//Почему код даёт именно такие результаты?

//2. Чему будет равен x в примере ниже?

//var a = 2; 
//var x = 1 + (a *= 2);                                         


//Значение а увеличивается в два раза(т.е a=4). Итого: x=1+4=5.
//x=5


 
//3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. Затем написать скрипт, который работает по следующему принципу:
//
//    если a и b положительные, вывести их разность;
//   если а и b отрицательные, вывести их произведение;
//    если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.

// <script>
// var a,b;
// if (a>0 && b>0) {
//     c=a-b;
//     alert(c);
// }
//	    else if (a<0 && b<0){
//			c=a*b;
//			alert(c);
//			}
//		  else if (a>=0 && b<0 || a<0 && b>=0) {
//		  c=a+b;
//		  alert(c);
//		  }
// </script>

// 4. Присвоить переменной а значение в промежутке [0..15]. С помощью оператора switch организовать вывод чисел от a до 15.
// <script>    
// var a=+prompt("Введите число от 0 до 15");
//    switch(a){
//    case 0: 
//       alert ("0");
//       break;
//    case 1: 
//       alert ("1");
//       break;
//    case 2: 
//       alert ("2");
//       break;
//    case 3: 
//       alert ("3");
//       break;
//    case 4: 
//       alert ("4");
//       break;
//    case 5: 
//       alert ("5");
//       break;
//    case 6: 
//       alert ("6");
//       break;
//    case 7: 
//       alert ("7");
//       break;
//    case 8: 
//       alert ("8");
//       break;
//    case 9: 
//       alert ("9");
//       break;
//    case 10: 
//       alert ("10");
//       break;
//    case 11: 
//       alert ("11");
//       break;
//    case 12: 
//       alert ("12");
//       break;
//    case 13: 
//       alert ("13");
//       break;
//    case 14: 
//       alert ("14");
//       break;
//    case 15: 
//       alert ("15");
//       break;
//    default:
//        alert("Вы ввели неправильное значение");
//    }
// </script>
    
    
//5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. Обязательно использовать оператор return.

// <script>
//		var a=5, b=8;
//
//		function sum(a,b) {
//    		return a+b;
//		}
//
//		function minus(a,b) {
//    		return a-b;
//		}
//
//		function multi (a,b) {
//    		return a*b;
//		}
//
//		function div (a,b) {
//    		return a/b;
//		}
//	</script>


//6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 3) и вернуть полученное значение (использовать switch).

// <script>
//  function mathOperation(arg1, arg2, operation){
//   switch(operation){
//    case sum: 
//          return arg1+arg2;
//                 break;
//    case minus: 
//          return arg1-arg2;
//                 break;
//    case multi: 
//          return arg1*arg2;
//                 break;
//    case div: 
//        return arg1/arg2;
//        break;                
//		}
// }
//	</script>


7. *Сравнить null и 0. Попробуйте объяснить результат.

null > 0; // false
null == 0; // false
null >= 0; // true

Есть алгоритмы сравнения(< > , ==, >= <=), по которым сравниваются два значения. 
В зависимости от знака мы переходим по алгоритму на нужные строки. Далее преобразуем наши значения к элементарному типу.

1) null > 0; // false
Значение null=+0. 
+0 равен 0, поэтому null>0 ; //false

2) null == 0; // false
в абстрактном алгоритме сравнения для равенств нет подходящего правило под сравнение двух значений. По дефолту(последнее правило) возвращаем false

3) null >= 0; // true
смотрим первое выражение. По спецификации, если null < 0(или null > 0) принимает значение false, то null >= 0 принимает значение true.



8. *С помощью рекурсии организовать функцию возведения числа в степень. Формат: function power(val, pow), где val – заданное число, pow – степень.

Видел уже решения и с числами >0 и с учётом числе <=0.
Хотелось бы пояснения,как записываются результаты выполнения функции в итоговый результат (прошли первое правило,возвращаемся обратно. Результат первого действия записался?)